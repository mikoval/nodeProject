<html>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.0/jquery.min.js"></script>
<script src="https://cdn.socket.io/socket.io-1.4.5.js"></script>
<script src="/chat.js"></script>
<link rel="stylesheet" href="/utility.css">
<style>
body{
    margin:20px;
}
</style>
<body>
<div id = "grey-cover" class = "menu-item"></div>
 <div id = "select-menu" class = "menu-item">
    <h3 style = "margin-bottom:0px">Waiting for an opponent to join. Share a link to this page to invite.</h3>
    <img src = "https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif" style = "width:100px; height:100px" > 
</div>

<div  style = "display:inline-block; position:relative"><canvas id="Canvas" width= "700px" height = "700px">
Your browser does not support the canvas element.
</canvas>
</div>

 <div id = "tools-container">
    <h3 style = "margin: 5px" id = "turn" style = "visibility: hidden;">Your turn</h3>
    <h3 style = "margin: 5px" id = "status" style = "visibility: hidden"></h3>
    <button id = "restart" style = "visibility: hidden; margin-bottom: 10px">Play Again</button>



    <div class = "chat-box">
        <div class = "chat-head">Chatbox</div>
        <div class = "chat-body">
            <textarea id = "chat-body" readonly></textarea>
        </div>
        <div class = "chat-input">
            <div id = "name-input-container"> <p style = "display:inline"> Name: </p> <input type="text" id = "name-input" style = "display:inline; width:50%" class = "input-box" placeholder = "Enter name in order to chat"> </div>
            <input type="text" id = "chat-input" style = "display: none; "  class = "input-box"  placeholder = "Type a message"> 
        </div>
    </div>
</div>
</body>
<script>
//canvas and context are used to manipulate the screen
var canvas = document.getElementById("Canvas");
var context = canvas.getContext("2d");
//width and height are dimensions of the grid (game)
var width = 7;
var height = 6;
//offset for the area above the game for buttons
var vOffset = 100;
// the dimensions for each piece of the grid. should be a square but calculating just in case. 
var vSize = 600/height;
var hSize = 700/width;
// grid that stores the game state. might want to switch to an object if we want to store more information
var grid;
// the current player. using p1 and p2 because its more readable than true/false. 
var turn;

socket = io()
socket.on('Connect4Update', setGrid);
socket.on('Connect4Turn', setTurn);
socket.on('Connect4Complete', complete);
socket.on('text', newText);
function complete(data){
    $("#turn").css("visibility", "hidden");
    $("#status").text(data.status)
    $("#status").css("visibility", "visible");
    $("#restart").css("visibility", "visible");
}
function setTurn(){
    $("#turn").css("visibility", "visible");
    turn = true;
}
function setGrid(data){
  
    if(data.status != "ready"){$(".menu-item").show();}
    else{
        
        $("#status").css("visibility", "hidden");
        $("#restart").css("visibility", "hidden");
        $("#turn").css("visibility", "hidden");
        $(".menu-item").hide()
        grid = data.grid;

        display(grid);
    }
   
}

// this function has to be called every time the game state is updated. 
function display(grid){
    //draw a rectangle at the start
    console.log(grid);
    context.fillStyle = "#AAAAAA";
    context.fillRect(0,vOffset, 700, 600 )
    context.font = hSize + "px Arial";
    for(var x  = 0; x < grid.length; x++){
        //for each column draw a circle for the drop button
        context.fillStyle = "green";     
        context.beginPath();
        context.arc(x*hSize + hSize/2, vSize/2, hSize/3, 0, 2 * Math.PI, false);
        context.fill();
        context.fillStyle = 'green';
        context.lineWidth = 5;
        context.strokeStyle = '#003300';
        context.stroke();
        for(var y = 0; y < grid[0].length; y++){
     
            //for each x,y create the correct circle.(black, red, white)
            console.log((x*hSize + hSize/2) + ", " + (y*vSize + vSize/2 + vOffset) );
            context.beginPath();
            context.arc(x*hSize + hSize/2,  y*vSize + vSize/2 + vOffset, hSize/3, 0, 2 * Math.PI, false);
            if(grid[x][y] == "R"){context.fillStyle = 'red'; }
            else if(grid[x][y] == "B"){context.fillStyle = 'black';}
            else{context.fillStyle = '#FFFFFF';}
            
            context.fill();

        }
    }
}

// all of the click commands
window.addEventListener('click', click, false);
function click(e){
    if(!turn){return;}
    var pos = getMousePos(canvas, e);
    var x = pos.x;
    var y = pos.y;
    if(x < 0 || x > 700){return;}
    if(y < 0 || y > 100){return;}
    var move = getMove(x,y);
    if(move == -1){return;}
    socket.emit('Connect4Move', {move:move});
    
   
    
}
function getMousePos(canvas, evt) {
    var rect = canvas.getBoundingClientRect();
    return {
      x: evt.clientX - rect.left,
      y: evt.clientY - rect.top
    };
}
function getMove(x,y){
    for(var i = 0; i < width; i++)
    {
        circleX = i * hSize + hSize/2; 
        circleY = vSize/2;
        diffX = circleX - x;
        diffY = circleY - y
        if(Math.sqrt(diffX * diffX + diffY * diffY )  < hSize /3)
        {
            return i;
        }
    }
    return -1;
}
$("#restart").on("click", function(){
    socket.emit('Connect4Restart');
})

</script>
</html>
