<html>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.0/jquery.min.js"></script>
<body>
<canvas id="Canvas" width= "600px" height = "600px">
Your browser does not support the canvas element.
</canvas>
<br>
Dimensions: <input type="range" id="dimension-slider" style = "width: 100px; display: inline-block" value="50"> <p style = "display:inline-block" id = "dimension-text">16x16</p>
<br>

Bombs: <input type="range" id="bombs-slider" style = "width: 100px; display: inline-block" value="50"> <p style = "display:inline-block" id = "bombs-text">40</p>
<br>
<input type = "checkbox" id = "auto-play">Auto Play</button>
<br>
<button type = "button" id = "recommend">Recommend Move</button>
<br>
<button type = "button" id = "restart">Restart</button>

<div id = "score-box" style = "position:absolute; right:30%; top:20%;">
    <p style="display:inline-block" >wins: </p> <p id = "wins" style="display:inline-block" > 0</p><br>
    <p style="display:inline-block" >losses: </p> <p id = "losses" style="display:inline-block" > 0</p><br>
    <p style="display:inline-block" >Win rate: </p> <p id = "win-rate" style="display:inline-block" > N/A</p><br>

</div>
<img border="0" id = "bombimg" alt="bomb" src="https://lh3.ggpht.com/YdRAkpeukPMqgxWjvYFoq3xftAP6ztWlNWBsci-S-XTM-0NFuqUpPZRafLM0oCbu63U=w300" style = " display:none">

</body>
<script>
var canvas = document.getElementById("Canvas");
var context = canvas.getContext("2d");
var width = 16;
var height = 16;
var size = 600/width;
var bombs = 40;

var autoplay = false;
var wins = 0;
var losses = 0;



var grid;
createWorld();

function createWorld(){
    grid = new Array();
    context.fillStyle = "#FFFFFF";
    context.fillRect(0, 0, 600, 600);

    
    createGrid(grid);

    addBombs();

    calculateNeighbors();

    display();
}


window.addEventListener('click', click, false);
function click(e){
    var pos = getMousePos(canvas, e);
    var x = pos.x;
    var y = pos.y;
    if(x < 0 || x > 600){return;}
    if(y < 0 || y > 600){return;}
    x = Math.floor(x / size);
    y = Math.floor(y / size);
    select(x,y);
}
function select(x, y){
    if(grid[x][y].shown){return;}
    grid[x][y].shown = true;
    var cellx = x;
    var celly = y;

    if(!grid[cellx][celly].bomb){
        if(grid[cellx][celly].neighbors == 0){
            context.fillStyle = "#FFFFFF";
            context.fillRect(cellx*size , celly*size , size, size )
            if(x >0 && y > 0){select(x-1, y-1);} 
            if(y > 0)        {select(x, y-1); }
            if(x <width-1 && y > 0){select(x+1, y-1);}

            if(x >0 )       {select(x-1, y);}
            if(x < width -1){select(x+1, y);}

            if(x >0 && y < height -1){select(x-1, y+1); }
            if(y < height -1)        {select(x, y+1); }
            if(x < width -1 && y < height -1){select(x+1, y+1);}
        }
        else{
            context.fillStyle = "#FFFFFF";
            context.fillRect(cellx*size , celly*size , size, size )
            if(grid[cellx][celly].neighbors == 1){context.fillStyle = "blue"; }
            if(grid[cellx][celly].neighbors == 2){context.fillStyle = "green"; }
            if(grid[cellx][celly].neighbors == 3){context.fillStyle = "red"; }
            if(grid[cellx][celly].neighbors == 4){context.fillStyle = "purple"; }
            if(grid[cellx][celly].neighbors == 5){context.fillStyle = "maroon"; }
            if(grid[cellx][celly].neighbors == 6){context.fillStyle = "turquoise"; }
            if(grid[cellx][celly].neighbors == 7){context.fillStyle = "black"; }
            if(grid[cellx][celly].neighbors == 8){context.fillStyle = "gray"; }
            context.font = size + "px Arial";
            context.fillText(grid[cellx][celly].neighbors,cellx*size + size/5,(celly+1)  * size  -size/10) ;



        }
    }
    else{
        losses = losses + 1
        if(autoplay){
            createWorld();
        }
        else{
            solve();
            setTimeout(function(){alert("Game Over");})
            
        }
        updateScore();
    }
    if(getUnknownCount(grid) == bombs){
        wins = wins + 1
        if(autoplay){
            createWorld();
        }
        else{
            solve();
            setTimeout(function(){alert("You Win");})
        }
        updateScore();
    }

}

function calculateNeighbors(){

    for (i=0;i<grid.length;i++) {
        for (j=0; j <grid[0].length;j++) {
            
            if(!grid[i][j].bomb){
                count = 0;
                if(i>0 && j > 0 && grid[i-1][j-1].bomb){count = count + 1;}
                if(i > 0 && grid[i-1][j].bomb){count = count + 1;}
                if(i > 0 && j < width -1  && grid[i-1][j+1].bomb){count = count + 1;}

                if(j > 0 && grid[i][j-1].bomb){count = count + 1;}
                if(j < width -1 && grid[i][j+1].bomb){count = count + 1;}

                if(i < height -1  && j > 0 &&  grid[i+1][j-1].bomb){count = count + 1;}
                if(i < height -1  && grid[i+1][j].bomb){count = count + 1;}
                if(i < height -1  && j < width -1  && grid[i+1][j+1].bomb){count = count + 1;}

                grid[i][j].neighbors = count;
            }
        }
    }
}
function addBombs(){
    var bombCounter =0;
    while (bombCounter < bombs){
        var x = Math.round(Math.random() * (width -1));
        var y = Math.round(Math.random() * (height -1));
        if(grid[x][y].bomb == undefined){
            grid[x][y].bomb = true;
            bombCounter = bombCounter + 1;
        }
    }
}
function createGrid(arr){
    for (i=0;i<width;i++) {
        arr[i] = new Array();
        for (j=0; j <height;j++) {
            arr[i][j]= {x: i, y:j, shown: false};
        }
    }
}
function getMousePos(canvas, evt) {
    var rect = canvas.getBoundingClientRect();
    return {
      x: evt.clientX - rect.left,
      y: evt.clientY - rect.top
    };
}
function solve(){

    for (i=0;i<grid.length;i++) {
        for (j=0; j <grid[0].length;j++) {
            var x = grid[i][j].x;
            var y = grid[i][j].y;
            cellx = x;
            celly = y;
            if(grid[i][j].bomb){
                
                context.fillStyle = "#FFFFFF";
                context.fillRect(x*size , y*size, size, size )
                var img=document.getElementById("bombimg");
                img.width = size;
                img.height = size;
                console.log(img);
                context.drawImage(img,x*size,y*size,size,size);
            }
            else{
                context.fillStyle = "#FFFFFF";
                context.fillRect(cellx*size , celly*size , size, size )
                if(grid[cellx][celly].neighbors == 1){context.fillStyle = "blue"; }
                if(grid[cellx][celly].neighbors == 2){context.fillStyle = "green"; }
                if(grid[cellx][celly].neighbors == 3){context.fillStyle = "red"; }
                if(grid[cellx][celly].neighbors == 4){context.fillStyle = "purple"; }
                if(grid[cellx][celly].neighbors == 5){context.fillStyle = "maroon"; }
                if(grid[cellx][celly].neighbors == 6){context.fillStyle = "turquoise"; }
                if(grid[cellx][celly].neighbors == 7){context.fillStyle = "black"; }
                if(grid[cellx][celly].neighbors == 8){context.fillStyle = "gray"; }
                context.font = size + "px Arial";
                context.fillText(grid[cellx][celly].neighbors,cellx*size + size/5,(celly+1)  * size  -size/10) ;
            
            }            
        }
    }
}
function display(){
    for (i=0;i<grid.length;i++) {
        for (j=0; j <grid[0].length;j++) {
            var x = grid[i][j].x;
            var y = grid[i][j].y;
            
            context.fillStyle = "#000000";
            context.fillRect(x*size + 1, y*size + 1, size-2, size-2 )
            
            
        }
    }
}
$("#dimension-slider").on("change", function(){
    var val = Math.round($(this).val() / 3.125); 
    if (val < 4){ val = 4;}
    $("#dimension-text").text(val + "x" + val);
    width = val;
    height = val;
    size = 600/width;

    $("#bombs-slider").trigger("change")
    createWorld();

})

$("#bombs-slider").on("change", function(){
    var val = Math.round(width * height *   Math.round($(this).val() / 3) / 100.0); 
    
    $("#bombs-text").text(val);
    bombs = val;
    createWorld();
})
$("#restart").on("click", function(){
    createWorld();
})

$("#recommend").on("click", function(){

   var position = getRecommended();
   context.fillStyle = "#00FF00";
    context.fillRect(position.x*size + 1, position.y*size + 1, size-2, size-2 )


})
$("#auto-play").on("change", function(){
    autoplay = $(this)[0].checked;
});
function getRecommended(){
    
    var unknownCount = getUnknownCount(grid);

    var board = grid.slice();
    var inside =  getInside(board);
    var edges = getEdges(board);
    var numbers = getNumbers(board);
    var combinations = getCombinations(edges, numbers);
    
    var probs = getProbabilities(combinations, unknownCount, bombs);

    var minProbsInd = minimumProbability(probs);

    if(minProbsInd == edges.length){return {x: inside[0].x, y:inside[0].y }}
    else{return {x: edges[minProbsInd].x, y:edges[minProbsInd].y }}
}
function minimumProbability(probs){
    prob = 2;
    probind = -1
    for(var i = 0; i < probs.length; i++){
        if(probs[i] < prob){
            prob = probs[i]
            probind = i;
        }
    }
    return probind;
}
function getProbabilities(combinations, unknownCount, bombsCount){
    arr = new Array(combinations[0].length);
    var count = 0;
    for(var i =0;  i < arr.length; i++ ){arr[i] = 0}
    for(var i = 0; i < combinations.length; i++){

        for (var j = 0; j < combinations[i].length; j++){
        

            if(combinations[i][j] == 1){
                arr[j] = arr[j] + 1
                count = count + 1;

            }
        }
    }
    var avg = count / combinations.length
    for(var i =0;  i < arr.length; i++ ){
        arr[i] = arr[i] / combinations.length;
    }


    
    var remainingProb;
    if(unknownCount - arr.length == 0){remainingProb = 100;}
    else{ remainingProb = (bombsCount - avg)/(unknownCount - arr.length);}
 
    arr.push(remainingProb);
    return arr;


}
function getCombinations(edges,numbers){
    var length = edges.length;
    combinationsArr = [];
    
    createCombination(new Array(), length, edges, numbers);

    combinationsArr = validCombinations(combinationsArr, edges, numbers);
    return combinationsArr;
    
}
function validCombination(arr, edges, numbers){
    var edgescopy = edges.slice();
    var numberscopy = numbers.slice();
    for(i = 0; i< edges.length; i++){
        if(i < arr.length){
            edgescopy[i].b = arr[i];
        }
        else{
            edgescopy[i].b = -1;
        }
    }
    for (numb = 0; numb < numbers.length; numb++){
        var nx = numbers[numb].x;
        var ny = numbers[numb].y;
        var count = 0;
        var free = 0;
        for (edge  = 0; edge < edges.length; edge++){
            var ex = edges[edge].x;
            var ey = edges[edge].y;
            b = edgescopy[edge].b;
            var n = false;
            var f = false;
            if(nx - 1 == ex && ny - 1 == ey  && b > 0){n = true;}
            if(nx - 1 == ex && ny  == ey && b > 0){n = true;}
            if(nx - 1 == ex && ny + 1 == ey && b > 0){n = true;}

            if(nx == ex && ny - 1 == ey && b > 0){n = true;}
            
            if(nx == ex && ny + 1 == ey && b > 0){n = true;}

            if(nx + 1 == ex && ny - 1 == ey && b > 0){n = true;}
            if(nx + 1 == ex && ny  == ey && b > 0){n = true;}
            if(nx + 1 == ex && ny + 1 == ey && b > 0){n = true;}
            //////////////
            if(nx - 1 == ex && ny - 1 == ey  && b < 0){f = true;}
            if(nx - 1 == ex && ny  == ey && b < 0){f = true;}
            if(nx - 1 == ex && ny + 1 == ey && b < 0){f = true;}

            if(nx == ex && ny - 1 == ey && b < 0){f = true;}
            
            if(nx == ex && ny + 1 == ey && b < 0){f = true;}

            if(nx + 1 == ex && ny - 1 == ey && b < 0){f = true;}
            if(nx + 1 == ex && ny  == ey && b <  0){f = true;}
            if(nx + 1 == ex && ny + 1 == ey && b < 0){f = true;}
            if(n){
                count = count + 1;
            }
            if(f){
                free = free + 1;
            }
        }
       
        numberscopy[numb].neigh = count;
        numberscopy[numb].free = free;
    }

    for (i = 0; i < numberscopy.length; i++){
        if(numberscopy[i].neigh >  numberscopy[i].number || numberscopy[i].neigh + numberscopy[i].free < numberscopy[i].number ){
            return false;
        }
    }
    return true;

    
}
function validCombinations(arr, edges, numbers){
    var ret = []
    for (comb  = 0; comb < arr.length; comb++){
        var edgescopy = edges.slice();
        var numberscopy = numbers.slice();
        for(i = 0; i< edges.length; i++){
            edgescopy[i].b = arr[comb][i];
        }
        
        
        for (numb = 0; numb < numbers.length; numb++){
            var nx = numbers[numb].x;
            var ny = numbers[numb].y;
            var count = 0;
            for (edge  = 0; edge < edges.length; edge++){
                var ex = edges[edge].x;
                var ey = edges[edge].y;
                b = edgescopy[edge].b;
                var n = false;
                if(nx - 1 == ex && ny - 1 == ey  && b){n = true;}
                if(nx - 1 == ex && ny  == ey && b){n = true;}
                if(nx - 1 == ex && ny + 1 == ey && b){n = true;}

                if(nx == ex && ny - 1 == ey && b){n = true;}
                
                if(nx == ex && ny + 1 == ey && b){n = true;}

                if(nx + 1 == ex && ny - 1 == ey && b){n = true;}
                if(nx + 1 == ex && ny  == ey && b){n = true;}
                if(nx + 1 == ex && ny + 1 == ey && b){n = true;}
                if(n){
                    count = count + 1;
                }
            }
           
            numberscopy[numb].neigh = count;
        }
        add = true
        for (i = 0; i < numberscopy.length; i++){
            if(numberscopy[i].neigh != numberscopy[i].number){
                add = false;
            }
        }
        if(add){
            ret.push(arr[comb])
        }
    }
    return ret;
}
function createCombination(combination, length, edges, numbers){
    if(!validCombination(combination, edges, numbers)){
        return;
    }
    if(combination.length == length)
    {
        combinationsArr.push(combination)
        return;
    }
    
    var newComb1 = combination.slice();
    var newComb2 = combination.slice();
    newComb1.push(0);
    newComb2.push(1);

    createCombination(newComb1, length, edges, numbers);
    createCombination(newComb2, length, edges, numbers);
}
function getInside(board){
    var arr = [];
     for (i=0;i<board.length;i++) {
        for (j=0; j <board[0].length;j++) {
            edge = false;
            if(!board[i][j].shown){
                if(i>0 && j > 0 && board[i-1][j-1].shown){edge = true;}
                if(i > 0 && board[i-1][j].shown){edge = true;}
                if(i > 0 && j < width -1  && board[i-1][j+1].shown){edge = true;}

                if(j > 0 && board[i][j-1].shown){edge = true;}
                if(j < width -1 && board[i][j+1].shown){edge = true;}

                if(i < height -1  && j > 0 &&  board[i+1][j-1].shown){edge = true;}
                if(i < height -1  && board[i+1][j].shown){edge = true;}
                if(i < height -1  && j < width -1  && board[i+1][j+1].shown){edge = true;}
            }
            if(!edge && !board[i][j].shown ){
                arr.push({x : i, y : j});
            }
        }
    }
    return arr;
}
function getEdges(board){
    var arr = [];
     for (i=0;i<board.length;i++) {
        for (j=0; j <board[0].length;j++) {
            edge = false;
            if(!board[i][j].shown){
                if(i>0 && j > 0 && board[i-1][j-1].shown){edge = true;}
                if(i > 0 && board[i-1][j].shown){edge = true;}
                if(i > 0 && j < width -1  && board[i-1][j+1].shown){edge = true;}

                if(j > 0 && board[i][j-1].shown){edge = true;}
                if(j < width -1 && board[i][j+1].shown){edge = true;}

                if(i < height -1  && j > 0 &&  board[i+1][j-1].shown){edge = true;}
                if(i < height -1  && board[i+1][j].shown){edge = true;}
                if(i < height -1  && j < width -1  && board[i+1][j+1].shown){edge = true;}
            }
            if(edge){
                arr.push({x : i, y : j});
            }
        }
    }
    return arr;
}
function getNumbers(board){

     var arr = [];
     for (i=0;i<board.length;i++) {
        for (j=0; j <board[0].length;j++) {
            number = false;
            if(board[i][j].shown && board[i][j].neighbors > 0){
                number = true;
            }
            if(number){
                arr.push({x : i, y : j, number: board[i][j].neighbors});
            }
        }
    }
    return arr;
}
function getUnknown(){
    var arr = new Array();
    createGrid(arr);
     for (i=0;i<grid.length;i++) {
        for (j=0; j <grid[0].length;j++) {
            if(grid[i][j].shown){
                arr[i][j] = 1;
            }
            else{
                arr[i][j] = 0
            }
        }
    }
    return arr
}
function getUnknownCount(arr){
    count = 0;
    for (i=0;i<arr.length;i++) {
        for (j=0; j <arr[0].length;j++) {
            if(!arr[i][j].shown){
                count = count + 1;
            }

        }
    }
    return count;
}
function updateScore(){
    $("#wins").text(wins);
    $("#losses").text(losses);
    $("#win-rate").text((wins/(wins+losses)).toFixed(2));
}



function loop(){
    if(autoplay){
        var position = getRecommended();
        select(position.x, position.y);
    }
     
    setTimeout(function(){loop()}, 100);
}
loop();
</script>
</html>

